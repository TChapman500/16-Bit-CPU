#bankdef main
{
	#bits 16
	#outp 0x0000
}

#subruledef register
{
	r0 => 0x0
	r1 => 0x1
	r2 => 0x2
	r3 => 0x3
	r4 => 0x4
	r5 => 0x5
	r6 => 0x6
	r7 => 0x7
	r8 => 0x8
	r9 => 0x9
	r10 => 0xA
	r11 => 0xB
	r12 => 0xC
	r13 => 0xD
	r14 => 0xE
	r15 => 0xF
}

#subruledef jcond
{
	JMP => 0x0
	JZ => 0x1
	JE => 0x1
	JNZ => 0x2
	JNE => 0x2
	JC => 0x3
	JL => 0x3
	JNC => 0x4
	JNL => 0x4
	JG => 0x5
	JNG => 0x6
}

#subruledef aluop_2
{
	ADD	=> 0x20
	ADC	=> 0x21
	SUB	=> 0x24
	SBB	=> 0x25
	SHL	=> 0x28
	SAL	=> 0x2A
	SHR	=> 0x2C
	SAR	=> 0x2F
	ROL	=> 0x30
	ROR	=> 0x32
	AND	=> 0x34
	OR	=> 0x35
	XOR	=> 0x36
	CMP	=> 0x38
	CMPS	=> 0x39
	TEST	=> 0x3A
}

#subruledef aluop_shift
{
	SHL	=> 0x29
	SAL	=> 0x2B
	SHR	=> 0x2D
	SAR	=> 0x2E
	ROL	=> 0x31
	ROR	=> 0x33
}

#subruledef aluop_1
{
	INC	=> 0x22
	ABS	=> 0x23
	DEC	=> 0x26
	NEG	=> 0x27
	NOT	=> 0x37
	TEST	=> 0x3B
}

#ruledef CH016M01_CPU
{
	NOP			=> 0x0000
	ISR	{imm16: i16}	=> 0x01 @ 0x00 @ imm16
	INT	0		=> 0x02 @ 0x00
	INT	1		=> 0x02 @ 0x10
	INT			=> 0x03 @ 0x00
	CALL	{imm16: i16}	=> 0x04 @ 0x00 @ imm16
	CALL	{rX: register}	=> 0x04 @ 0x1  @ rX
	RET			=> 0x05 @ 0x00
	RTI			=> 0x05 @ 0x10
	
	CPUID	{rX: register}, {Y: i4}		=> 0x06 @ Y @ rX
	
	LD	{rX: register}, {imm16: i16}			=> 0x08  @ 0x0 @ rX @ imm16
	LD	{rX: register}, [{imm16: i16}]			=> 0x09  @ 0x0 @ rX @ imm16
	LD	{rX: register}, [{rY: register}]		=> 0x0A  @ rY  @ rX
	LD	{rX: register}, [{rY: register} + {imm16: i16}]	=> 0x0B  @ rY  @ rX @ imm16
	
	ST	[{imm16: i16}], {rX: register}			=> 0x0D  @ 0x0 @ rX @ imm16
	ST	[{rY: register}], {rX: register} 		=> 0x0E  @ rY  @ rX
	ST	[{rY: register} + {imm16: i16}], {rX: register}	=> 0x0F  @ rY  @ rX @ imm16
	
	PUSH	{rX: register}	=> 0x10 @ 0x0 @ rX
	PUSH	flags		=> 0x10 @ 0x10
	POP	{rX: register}	=> 0x11 @ 0x0 @ rX
	POP	flags		=> 0x11 @ 0x10
	
	{JUMP: jcond}	{imm16: i16}	=> 0x12 @ JUMP @ 0x0 @ imm16
	{JUMP: jcond}	{rX: register}	=> 0x13 @ JUMP @ rX
	
	MOV	{rX: register}, flags		=> 0x14 @ 0x0 @ rX
	MOV	flags, {rX: register}		=> 0x15 @ 0x0 @ rX
	MOV	{rX: register}, {rY: register}	=> 0x16 @ rY  @ rX
	
	{op: aluop_2}		{rX: register}, {rY: register}	=> op @ rY  @ rX
	{op: aluop_shift}	{rX: register}, {Y: i4}		=> op @ Y   @ rX
	{op: aluop_1}		{rX: register}			=> op @ 0x0 @ rX
	
	BRK	=> 0xFE @ 0x00
	HLT	=> 0xFF @ 0x00
}
